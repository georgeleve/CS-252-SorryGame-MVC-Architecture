package Controller;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import Model.card.Card;
import Model.card.NumberCard;
import Model.card.NumberOneCard;
import Model.card.NumberTwoCard;
import Model.deck.Deck;
import Model.pawn.Pawn;
import Model.player.Player;
import Model.square.EndSlideSquare;
import Model.square.HomeSquare;
import Model.square.InternalSlideSquare;
import Model.square.SafetyZoneSquare;
import Model.square.SimpleSquare;
import Model.square.Square;
import Model.square.StartSlideSquare;
import Model.square.StartSquare;
import view.View;

/**
 * This class is the master of the game and
 * controls all the operarions.
 * @author George Leventopoulos
 */
public class Controller {
	public boolean gameFinished = false;
	public View view;
	public Player player1;
	public Player player2;
	public Pawn [] pawns = new Pawn[4];
	public Square [] squares = new Square[73]; 
	private int fold;
	private int isReady;
	int l = 0;
	Card card;
	NumberCard c;
	int num = 1;
	int num1 = 0;
	public int cardscounter = 44;
	Deck deck = new Deck();
	
	public static void main(String[] args) {
		Controller c = new Controller();
		c.initialize();
	}
	public void initialize() {
		this.fold = 0;
        this.isReady = 0;
		//deck.initCards();
		view = new View();
		initPawns();
		initSquares();
		initListeners();
	}
	/**
	 * Transformer , Initalize all the listeners.
	 */
	public void initListeners() {
		view.returnCardButton().addActionListener(new ActionListener(){			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				removeAndReplaceCard(l);
				l++;
			}
		});
		/*
		view.getPawn0().addActionListener(new ActionListener(){			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(!card.getName().equals("SorryCard")) {
					if(card.getName().equals("NumberOneCard")) {
						deck.getGameCards().get(l).movePawn();
					}
				}	
			}
		});
		*/
	}
	public void initPawns() {
		pawns[0] = new Pawn(Color.red,-1);
		pawns[1] = new Pawn(Color.red,-1);
		pawns[2] = new Pawn(Color.yellow,-1);
		pawns[3] = new Pawn(Color.yellow,-1);
		player1 = new Player(Color.red, "Player1", pawns[0], pawns[1]);
		player2 =  new Player(Color.yellow, "Player2", pawns[2], pawns[3]);
	}
	public void initSquares() {
		for(int i  = 0; i < 73;i++) {	
			if(i==0||i == 8||i==15||i==23||i==30|| i==38 || i==45 || i==53) { 
				squares[i] = new StartSlideSquare(i);
			
			}else if(i==1||i == 2||i==9||i==10||i==11|| i==16 ||
					i==17||i == 24||i==25||i==26||i==31|| i==32 || i==39|| i==40
					||i==41||i==46||i==47||i==54||i==55||i==56) {
				squares[i] = new InternalSlideSquare(i);
			
			}else if(i==3||i == 12||i==18||i==27||i==33||i==42||i==48||i==57) {
				squares[i] = new EndSlideSquare(i);
					
			}else if(i == 60||i==61||i==62||i==63||i==64||i==67||
					i==68||i==69||i==70||i==71) {
				squares[i] = new SafetyZoneSquare(i);
			
			}else if(i==65||i==66||i==72|| i==73) { 
				squares[i] = new HomeSquare(i);
	
			}else //the white squares
				squares[i] = new SimpleSquare(i);
		}
	}
	public void removeAndReplaceCard(int positionOfCard) {
		if(deck.getGameCards().isEmpty()) {
			deck.initCards(); //suffle the cards again.
		}else {
			deck.getGameCards().remove(positionOfCard);
			card = deck.getGameCards().get(positionOfCard+1);
			view.updateCard(card);
			if(num % 2 == 0 && card.getName()!="NumberTwoCard") {
				num1=2;
			}else if(card.getName()!="NumberTwoCard") {
				num1=1;
			}	
			num++;
			view.updateInfobox("                      Infobox\n"
					+ "Cards left: " + cardscounter + "   "
					+"     Turn: Player"+ num1 +"\n"+ card.toString());	
			//c.movePawn();
			//String a = card.toString();
			//JOptionPane.showInputDialog(this, a);
		}
		if(cardscounter == 24) {
			deck.initCards();
			cardscounter = 23;
		}
		if(cardscounter == 1) {
			deck.initCards();
			cardscounter = 45;
		}
		cardscounter--;
	}

	public void checkIfItCanBePlayed(int positionOfCard) {
		Card cardToPlay = deck.getGameCards().get(positionOfCard);
		view.updatePawn(0, 9);
		if (!gameFinished) {
            removeAndReplaceCard(positionOfCard);
        } else {
            view.updateInfobox("Game Has Finished! Player Reached the End!!");
            view.showWinningMessage("You are the winner!");
        }
	}
	/**
	 *Transformer(mutative)
	 */
	public void setFold(){
		
		
	}
	/**
	 * Makes the changes that are needed. 
	 */
	public void applyChanges() {
		
	}
	/**
	 * Transformer
	 * Sets players turn.
	 */
	public void setTurn() {
		
	}
	/**
	 * Check if the game has finished.
	 * @return true or false if the game is finished or not.
	 */
	//public boolean CheckIfGameFinished() {
		//if(player1.isHasFinished() || player2.isHasFinished()) 
			//return true;
		//return false;
	//}

	public void proxeiro() {
		/*
		if(card == 1) {
			//metakinise to pioni kata 1
			// 'h bgalto apo to start
		}
		if(card == 2){
			//metakinise to pioni 2 brosta }  kai xanapaije
			// 'h bgalto apo to start     }
		}
		if(card == 3){
			//metakinise to pioni kata 3 mprosta
		}

		if(card == 4){
			//metakinise to pioni 4 thesis piso
		}
		
		if(card == 5){
			//metakinise to pioni kata 5 mprosta
		}
		
		if(card == 7){
			//7 thesis pros ta embros 'h na xoriso tis  thesis pros ta embros gia ta dyo pionia.
		}
		
		if(card == 8){
			//metakinise to pioni 8 theseis mprosta
		}
		if(card == 10){
			//metakinise to pioni 8 theseis mprosta 'h mia thesi piso
		}
		if(card == 11){
			//metakinise to pioni 11 theseis mprosta(an ginetai)
			 * h'
			 * allaxe me pioni antipalou
			 * 'h na paths fold
		}
		if(card == 12){
			//metakinise to pioni 12 theseis mprosta
		}
		if(card == sorry){
			apo tin thesi start (kai mono) to pioni allazei me thn thesi tou antipalou
			kai o antipalos paei sto start
		}
		*/
	}
}
