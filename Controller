package Controller;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import Model.card.Card;
import Model.card.NumberCard;
import Model.card.NumberOneCard;
import Model.card.NumberTwoCard;
import Model.deck.Deck;
import Model.pawn.Pawn;
import Model.player.Player;
import Model.square.EndSlideSquare;
import Model.square.HomeSquare;
import Model.square.InternalSlideSquare;
import Model.square.SafetyZoneSquare;
import Model.square.SimpleSquare;
import Model.square.Square;
import Model.square.StartSlideSquare;
import Model.square.StartSquare;
import view.View;
/**
 * This class is the master of the game and
 * controls all the operarions.
 * @author George Leventopoulos
 */
public class Controller {
	public boolean gameFinished = false;
	public View view;
	public Player player1;
	public Player player2;
	public Pawn [] pawns = new Pawn[4];
	public Square [] squares = new Square[73]; 
	private int fold;
	private int isReady;
	int l = 0;
	int k0 = -1; //position of pawns[0]
	int k1 = -1; //position of pawns[1]
	int k2 = -1;//position of pawns[2]
	int k3 = -1;//position of pawns[3]
	Card card;
	Card crd;
	int turn = 1;
	NumberCard c;
	int num = 1;
	int num1 = 0;
	public int cardscounter = 44;
	Deck deck = new Deck();
	boolean hasStarted0 = false;
	boolean hasStarted1 = false;
	boolean hasStarted2 = false;
	boolean hasStarted3 = false;
	
	
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		Controller c = new Controller();
		c.initialize();
	}
	/**
	 * initialize what is needed
	 */
	public void initialize() {
		this.fold = 0;
        this.isReady = 0;
		//deck.initCards();
		view = new View();
		initPawns();
		initSquares();
		initListeners();
	}
	/**
	 * Transformer , Initalize all the listeners.
	 */
	public void initListeners() {
		view.returnCardButton().addActionListener(new ActionListener(){			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				removeAndReplaceCard(l);
				l++;
			}
		});
		view.getPawn0().addActionListener(new ActionListener(){			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(turn == 1) {
					if(canMove0() && card.getName()!="SorryCard") {
						canStart0();
						if(hasStarted0 == true) {	
							if(k0 == -1) {
								if(c.getValue() == 1 || (c.getValue() == 2)) k0 = 3; 
							} 
							else if(c.getValue() == 4){
								k0 = k0-4;
							}else {
								k0 = k0 + c.getValue();
							}
							
							if(k0 == -1)k0 = 59; //special case for card4.
							//if(k0 == 60) k0 = 0;
							if(k0 == 2) k0 = 60;
							
							view.updatePawn(k0, 0);
							
							if((k0==66 && k1==65) || (k0==65 && k1==66)) {
								view.getInfobox().setBackground(Color.red);
								view.updateInfobox("Congratulations!\n\n\nRED pawns win!!!");
							}
							
							view.updateInfobox(Integer.toString(k0));
							//Slides
							if(k0==23 || k0==38 || k0==53) {
								k0 =k0+4;
								view.updatePawn(k0,0);
								view.updateInfobox("Slide....");
							}
							if(k0 ==15 || k0==28 || k0==45) {
								k0 = k0+3;
								view.updatePawn(k0,0);
								view.updateInfobox("Slide....");
							}
						}
					}
				}else {
					view.updateInfobox("It's Player's 1 turn.");
				}
			}
		});
	
	
	view.getPawn1().addActionListener(new ActionListener(){			
		public void actionPerformed(ActionEvent arg0) {
			if(turn == 1) {
				if(canMove1() && card.getName()!="SorryCard") {
					canStart1();
					if(hasStarted1 == true) {	
						if(k1 == -1) {
							if(c.getValue() == 1 || (c.getValue() == 2)) {
								k1 = 3; //remove pawn from start
							}else {
								k1 = k3; // sorry card.
								k0 = 3;
								view.updatePawn(3,0);
								view.updateInfobox("SorryCard!\nPlease select fold.");//using sorry card
							}
						} 
						else if(c.getValue() == 4){
							k1 = k1-4;
						}else {
							k1 = k1 + c.getValue();
						}
						
						if(k1 == -1)k1 = 59; 
						if(k1 == 60) k1 = 0;
						if(k1 == 2) k1 = 60;
						view.updatePawn(k1, 1);
						
						//If the is a winner.
						if((k0==66 && k1==65) || (k0==65 && k1==66)) {
							view.getInfobox().setBackground(Color.red);
							view.updateInfobox("Congratulations!\n\n\nRED pawns win!!!");
						}
						//view.updateInfobox(Integer.toString(k1));
						
						//Slides
						if(k1==23 || k1==38 || k1==53) {
							k1 =k1+4;
							view.updatePawn(k1,1);
							view.updateInfobox("Slide....");
						}
						if(k1 ==15 || k1==28 || k1==45) {
							k1 = k1+3;
							view.updatePawn(k1,1);
							view.updateInfobox("Slide....");
						}
					}
				}
		}else {
			view.updateInfobox("It's Player's 1 turn.");
		}
		}
	});
	view.getPawn2().addActionListener(new ActionListener(){		
		@Override
		public void actionPerformed(ActionEvent arg0) {
			if(turn ==2) {
			if(canMove2()) {
				canStart2();
				if(hasStarted2 == true) {	
					if(k2 == -1) {
						if(c.getValue() == 1 || (c.getValue() == 2)) {
							k2 = 33; 
						}else {
							k2 = k0; // sorry card.
							k0 = 3;
							view.updatePawn(3,0);
							view.updateInfobox("SorryCard!\nPlease select fold.");
							//view.getPawn0().setBounds(145, 70, 35, 35);
							//view.getBack().repaint();
						}
					}
					else if(c.getValue() == 4){
						k2 = k2-4;
					}else {
						k2 = k2 + c.getValue();
					}
					
					
					if(k2 == 60) {
						k2 = 3;
						view.updateInfobox("Slide....");
					}
					if(k2 == 32) k2 = 67;
					
					view.updatePawn(k2, 2);
					//If there is a winner.
					if((k2 == 73 && k3==72) ||(k2==72 && k3==73)) {
						view.getInfobox().setBackground(Color.yellow);
						view.updateInfobox("Congratulations!\n\\n\nYELLOW pawns win!");
					}
				//	view.updateInfobox(Integer.toString(k2));
					if(k2==8 || k2==23 || k2==53) {
						k2 =k2+4;
						view.updatePawn(k2,2);
						view.updateInfobox("Slide....");
					}
					if(k2 ==15 || k2==45) {
						k2 = k2+3;
						view.updatePawn(k2,2);
						view.updateInfobox("Slide....");
					}
				}
			} 
		}else {
			view.updateInfobox("It's Player's 2 turn.");
		}
	}
	});
	view.getPawn3().addActionListener(new ActionListener(){		
		@Override
		public void actionPerformed(ActionEvent arg0) {
			if(turn ==2) {
			if(canMove3()) {
				canStart3();
				if(hasStarted3 == true) {	
					if(k3 == -1) {
						if(c.getValue() == 1 || (c.getValue() == 2)) {
							k3 = 33; 
						}else {
							k3 = k1; // sorry card.
							k1 = 3;
							view.updatePawn(3,1);
							view.updateInfobox("SorryCard!\nPlease select fold.");
						}
					} 
					else if(c.getValue() == 4){
						k3 = k3-4;
					}else {
						k3 = k3 + c.getValue();
					}
					
					
					if(k3 == 60) {
						k3 = 3;
						view.updateInfobox("Slide....");
					}
					if(k3 == 32) k3 = 67;
					
					view.updatePawn(k3, 3);
					//If there is a winner.
					if((k2 == 73 && k3==72) ||(k2==72 && k3==73)) {
						view.getInfobox().setBackground(Color.yellow);
						view.updateInfobox("Congratulations!\n\\n\nYELLOW pawns win!");
					}
					//view.updateInfobox(Integer.toString(k3));
					if(k3==8 || k3==23 || k3==53) {
						k3 =k3+4;
						view.updatePawn(k3,3);
						view.updateInfobox("Slide....");
					}
					if(k3==15 || k3==45) {
						k3 = k3+3;
						view.updatePawn(k3,3);
						view.updateInfobox("Slide....");
					}
				}
			}
		}else {
			view.updateInfobox("It's Player's 2 turn.");
		}
		}
	});
	
	view.getFoldbutton().addActionListener(new ActionListener(){			
		public void actionPerformed(ActionEvent arg0) {
			view.updateInfobox("Fold Button, next player.");
		}
	});	
}
	
	public void canStart0() {
		if(k0 == -1) {
			if(c.getValue() == 1 || c.getValue() == 2 || (card.getName() =="SorryCard")) {
				hasStarted0 = true;
			}else {
				view.updateInfobox("You can't move from start \nposition with this card."
						+ "\nPlease select fold.");
			}
		}
	}	
	public void canStart1() {
		if(k1 == -1 && (c.getValue() == 1 || c.getValue() == 2)) {
			hasStarted1 = true;
		}else {
			view.updateInfobox("You can't move from start \nposition with this card."
					+ "\nPlease select fold.");
		}
	}
	public void canStart2() {
		if(k2 == -1 && (c.getValue() == 1 || c.getValue() == 2 || card.getName() =="SorryCard")) {
			hasStarted2 = true;
		}else {
			view.updateInfobox("You can't move from start\nposition with this card."
					+ "\nPlease select fold.");
		}
	}
	public void canStart3() {
		if(k3 == -1 && (c.getValue() == 1 || c.getValue() == 2||card.getName() =="SorryCard")) {
			hasStarted3 = true;
		}else {
			view.updateInfobox("You can't move from start\nposition with this card."
					+ "\nPlease select fold.");
		}
	}
	public boolean canMove0() {
		if(card.getName() != "SorryCard") {
			if(k0+c.getValue() >= 67){
				view.updateInfobox("You can't move your pawn with\nthis card,please select fold.");
				return false;
			}
		}
		return true;
	}
	public boolean canMove1() {
		if(card.getName() != "SorryCard") {
			if(k1+c.getValue() >= 67) {
				view.updateInfobox("You can't move your pawn with\nthis card, please select fold.");
				return false;
			}
		}
		return true;
	}
	public boolean canMove2() {
		if(card.getName() != "SorryCard") {
			if(k2+c.getValue()>=74) {
				view.updateInfobox("You can't move your pawn with\nthis card,please select fold.");
				return false;
			}
			if(k2+c.getValue() > 59) {
				
			}
		}
		return true;
	}
	public boolean canMove3() {
		if(card.getName() != "SorryCard") {
			if(k3+c.getValue()>=74) {
				view.updateInfobox("You can't move your pawn with\nthis card,please select fold.");
				return false;
			}
		}
		return true;
	}
	/**
	 * Transformer , Initialize all the pawns.
	 */
	public void initPawns() {
		pawns[0] = new Pawn(Color.red,-1);
		pawns[1] = new Pawn(Color.red,-1);
		pawns[2] = new Pawn(Color.yellow,-1);
		pawns[3] = new Pawn(Color.yellow,-1);
		player1 = new Player(Color.red, "Player1", pawns[0], pawns[1]);
		player2 =  new Player(Color.yellow, "Player2", pawns[2], pawns[3]);
	}
	/**
	 * Transformer , Initalize all the squares.
	 */
	public void initSquares() {
		for(int i  = 0; i < 73;i++) {	
			if(i==0||i == 8||i==15||i==23||i==30|| i==38 || i==45 || i==53) { 
				squares[i] = new StartSlideSquare(i);
			
			}else if(i==1||i == 2||i==9||i==10||i==11|| i==16 ||
					i==17||i == 24||i==25||i==26||i==31|| i==32 || i==39|| i==40
					||i==41||i==46||i==47||i==54||i==55||i==56) {
				squares[i] = new InternalSlideSquare(i);
			
			}else if(i==3||i == 12||i==18||i==27||i==33||i==42||i==48||i==57) {
				squares[i] = new EndSlideSquare(i);
					
			}else if(i == 60||i==61||i==62||i==63||i==64||i==67||
					i==68||i==69||i==70||i==71) {
				squares[i] = new SafetyZoneSquare(i);
			
			}else if(i==65||i==66||i==72|| i==73) { 
				squares[i] = new HomeSquare(i);
	
			}else //the white squares
				squares[i] = new SimpleSquare(i);
		}
	}
	/**
	 * Removes and replace a card.
	 * @param positionOfCard the position that we want to replace
	 */
	public void removeAndReplaceCard(int positionOfCard) {
		if(deck.getGameCards().isEmpty()) {
			deck.initCards(); //suffle the cards again.
		}else {
			deck.getGameCards().remove(positionOfCard);
			
			
			card = deck.getGameCards().get(positionOfCard+1);
			if(card.getName() != "SorryCard") {
				c = (NumberCard) deck.getGameCards().get(positionOfCard+1);
			}
			view.updateCard(card);
			if(num % 2 == 0 && card.getName()!="NumberTwoCard") {
				num1=2;
			}else if(card.getName()!="NumberTwoCard") {
				num1=1;
			}	
			num++;
			view.updateInfobox("                      Infobox\n"
					+ "Cards left: " + cardscounter + "   "
					+"     Turn: Player"+ num1 +"\n"+ card.toString());	
			turn = num1;
			//c.movePawn();
			//String a = card.toString();
			//JOptionPane.showInputDialog(this, a);
		}
		if(cardscounter == 24) {
			deck.initCards();
			cardscounter = 23;
		}
		if(cardscounter == 1) {
			deck.initCards();
			cardscounter = 45;
		}
		cardscounter--;
	}
	/**
	 * Check if the card can be played.
	 */
	public void checkIfItCanBePlayed(int positionOfCard) {
		Card cardToPlay = deck.getGameCards().get(positionOfCard);
		view.updatePawn(0, 9);
		if (!gameFinished) {
            removeAndReplaceCard(positionOfCard);
        } else {
            view.updateInfobox("Game Has Finished! Player Reached the End!!");
            view.showWinningMessage("You are the winner!");
        }
	}
	/**
	 *Transformer(mutative)
	 */
	public void setFold(){
		
		
	}
	/**
	 * Makes the changes that are needed. 
	 */
	public void applyChanges() {
		
	}
	/**
	 * Transformer ,Sets players turn.
	 */
	public void setTurn() {
		
	}
	/**
	 * Check if the game has finished.
	 * @return true or false if the game is finished or not.
	 */
	//public boolean CheckIfGameFinished() {
		//if(player1.isHasFinished() || player2.isHasFinished()) 
			//return true;
		//return false;
	//}
}
